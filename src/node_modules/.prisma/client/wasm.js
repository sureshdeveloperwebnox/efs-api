
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.6.0
 * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
 */
Prisma.prismaVersion = {
  client: "6.6.0",
  engine: "f676762280b54cd07c770017ed3711ddde35f37a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  address: 'address',
  phone: 'phone',
  organization_name: 'organization_name',
  industry_name: 'industry_name',
  pincode: 'pincode',
  website: 'website',
  timezone: 'timezone',
  plan_type: 'plan_type',
  subscription_start_date: 'subscription_start_date',
  subscription_end_date: 'subscription_end_date',
  file_storage_limit: 'file_storage_limit',
  data_storage_limit: 'data_storage_limit',
  created_at: 'created_at',
  updated_at: 'updated_at',
  currencyid: 'currencyid'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  email: 'email',
  password_hash: 'password_hash',
  isVerified_Email: 'isVerified_Email',
  isVerified_PhoneNumber: 'isVerified_PhoneNumber',
  first_name: 'first_name',
  last_name: 'last_name',
  phone: 'phone',
  job_title: 'job_title',
  user_type: 'user_type',
  is_active: 'is_active',
  last_login_at: 'last_login_at',
  email_verified: 'email_verified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_roleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  access_rights: 'access_rights',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CurrenciesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  exchange_rate: 'exchange_rate',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_role_assignmentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  profile_id: 'profile_id',
  assigned_at: 'assigned_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SkillsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_skillsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  skill_id: 'skill_id',
  organization_id: 'organization_id',
  proficiency_level: 'proficiency_level',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Business_hoursScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  day_of_week: 'day_of_week',
  start_time: 'start_time',
  end_time: 'end_time',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.HolidaysScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  holiday_date: 'holiday_date',
  is_recurring: 'is_recurring',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Time_off_requestsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  start_date: 'start_date',
  end_date: 'end_date',
  reason: 'reason',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CrewsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  leader_id: 'leader_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Crew_membersScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  crew_id: 'crew_id',
  user_id: 'user_id',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EquipmentsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  equipment_type: 'equipment_type',
  status: 'status',
  location: 'location',
  availability_date: 'availability_date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  industry: 'industry',
  tax_id: 'tax_id',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CustomersScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  company_id: 'company_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServicesScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  description: 'description',
  duration: 'duration',
  price: 'price',
  required_skills: 'required_skills',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AssetsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  customer_id: 'customer_id',
  asset_name: 'asset_name',
  serial_number: 'serial_number',
  model: 'model',
  manufacturer: 'manufacturer',
  status: 'status',
  location: 'location',
  notes: 'notes',
  purchase_date: 'purchase_date',
  warranty_expiry: 'warranty_expiry',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PartsScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  description: 'description',
  price: 'price',
  inventory_count: 'inventory_count',
  reorder_level: 'reorder_level',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Maintenance_plansScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  name: 'name',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  frequency: 'frequency',
  frequency_unit: 'frequency_unit',
  frequency_unit_type: 'frequency_unit_type',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Maintenance_plan_assetsScalarFieldEnum = {
  id: 'id',
  maintenance_plan_id: 'maintenance_plan_id',
  asset_id: 'asset_id',
  assigned_at: 'assigned_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_ordersScalarFieldEnum = {
  id: 'id',
  organization_id: 'organization_id',
  customer_id: 'customer_id',
  company_id: 'company_id',
  asset_id: 'asset_id',
  maintenance_plan_id: 'maintenance_plan_id',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  assigned_to: 'assigned_to',
  assigned_crew_id: 'assigned_crew_id',
  scheduled_start_date: 'scheduled_start_date',
  scheduled_end_date: 'scheduled_end_date',
  actual_start_date: 'actual_start_date',
  actual_end_date: 'actual_end_date',
  currency_id: 'currency_id',
  estimated_cost: 'estimated_cost',
  actual_cost: 'actual_cost',
  address: 'address',
  city: 'city',
  state: 'state',
  postal_code: 'postal_code',
  country: 'country',
  is_multi_day: 'is_multi_day',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_order_servicesScalarFieldEnum = {
  id: 'id',
  work_order_id: 'work_order_id',
  service_id: 'service_id',
  quantity: 'quantity',
  service_cost: 'service_cost',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_order_tasksScalarFieldEnum = {
  id: 'id',
  work_order_id: 'work_order_id',
  task_name: 'task_name',
  task_description: 'task_description',
  assigned_to: 'assigned_to',
  status: 'status',
  due_date: 'due_date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_order_assetsScalarFieldEnum = {
  id: 'id',
  work_order_id: 'work_order_id',
  asset_id: 'asset_id',
  quantity: 'quantity',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_order_crewScalarFieldEnum = {
  id: 'id',
  work_order_id: 'work_order_id',
  crew_id: 'crew_id',
  assigned_at: 'assigned_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Work_order_approvalsScalarFieldEnum = {
  id: 'id',
  work_order_id: 'work_order_id',
  approved_by: 'approved_by',
  approval_status: 'approval_status',
  approved_at: 'approved_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  work_order_id: 'work_order_id',
  invoice_number: 'invoice_number',
  invoice_date: 'invoice_date',
  due_date: 'due_date',
  total_amount: 'total_amount',
  status: 'status',
  currency_id: 'currency_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Invoice_itemsScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  service_id: 'service_id',
  part_id: 'part_id',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_price: 'total_price',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  payment_date: 'payment_date',
  payment_amount: 'payment_amount',
  payment_method: 'payment_method',
  payment_status: 'payment_status',
  transaction_id: 'transaction_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  notification_type: 'notification_type',
  message: 'message',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Email_templatesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  body: 'body',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  action: 'action',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  changes: 'changes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TokensScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  token: 'token',
  type: 'type',
  expires: 'expires',
  blacklisted: 'blacklisted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PlanType = exports.$Enums.PlanType = {
  FREE: 'FREE',
  STANDARD: 'STANDARD',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  TECHNICIAN: 'TECHNICIAN',
  DISPATCHER: 'DISPATCHER',
  CUSTOMER: 'CUSTOMER'
};

exports.ProficiencyLevel = exports.$Enums.ProficiencyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  EXPERT: 'EXPERT'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  SUNDAY: 'SUNDAY',
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DENIED: 'DENIED'
};

exports.EqupmentStatus = exports.$Enums.EqupmentStatus = {
  AVAILABLE: 'AVAILABLE',
  IN_USE: 'IN_USE',
  UNDER_MAINTENANCE: 'UNDER_MAINTENANCE',
  DAMAGED: 'DAMAGED'
};

exports.AssetStatus = exports.$Enums.AssetStatus = {
  OPERATIONAL: 'OPERATIONAL',
  NEEDS_MAINTENANCE: 'NEEDS_MAINTENANCE',
  UNDER_REPAIR: 'UNDER_REPAIR',
  DECOMMISSIONED: 'DECOMMISSIONED'
};

exports.Frequency = exports.$Enums.Frequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  BIWEEKLY: 'BIWEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  SEMIANNUALLY: 'SEMIANNUALLY',
  ANNUALLY: 'ANNUALLY',
  CUSTOM: 'CUSTOM'
};

exports.FrequencyUnitType = exports.$Enums.FrequencyUnitType = {
  DAYS: 'DAYS',
  WEEKS: 'WEEKS',
  MONTHS: 'MONTHS'
};

exports.Prioirty = exports.$Enums.Prioirty = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.WorkOrderStatus = exports.$Enums.WorkOrderStatus = {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.WorkOrderTaskStatus = exports.$Enums.WorkOrderTaskStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  OVERDUE: 'OVERDUE'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CASH: 'CASH',
  CHECK: 'CHECK',
  PAYPAL: 'PAYPAL'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ALERT: 'ALERT',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  READ: 'READ',
  DISMISSED: 'DISMISSED'
};

exports.LogType = exports.$Enums.LogType = {
  USER: 'USER',
  WORK_ORDER: 'WORK_ORDER',
  SERVICE: 'SERVICE',
  INVOICE: 'INVOICE',
  ASSET: 'ASSET'
};

exports.Prisma.ModelName = {
  organizations: 'organizations',
  users: 'users',
  user_role: 'user_role',
  currencies: 'currencies',
  user_role_assignments: 'user_role_assignments',
  skills: 'skills',
  user_skills: 'user_skills',
  business_hours: 'business_hours',
  holidays: 'holidays',
  time_off_requests: 'time_off_requests',
  crews: 'crews',
  crew_members: 'crew_members',
  equipments: 'equipments',
  companies: 'companies',
  customers: 'customers',
  services: 'services',
  assets: 'assets',
  parts: 'parts',
  maintenance_plans: 'maintenance_plans',
  maintenance_plan_assets: 'maintenance_plan_assets',
  work_orders: 'work_orders',
  work_order_services: 'work_order_services',
  work_order_tasks: 'work_order_tasks',
  work_order_assets: 'work_order_assets',
  work_order_crew: 'work_order_crew',
  work_order_approvals: 'work_order_approvals',
  invoices: 'invoices',
  invoice_items: 'invoice_items',
  payments: 'payments',
  notifications: 'notifications',
  email_templates: 'email_templates',
  audit_logs: 'audit_logs',
  tokens: 'tokens'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
